#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.1.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_savgol_filter_impl(
    port_: MessagePort,
    x: impl Wire2Api<Vec<f64>> + UnwindSafe,
    window_length: impl Wire2Api<usize> + UnwindSafe,
    poly_order: impl Wire2Api<usize> + UnwindSafe,
    derivative: impl Wire2Api<usize> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<f64>, _>(
        WrapInfo {
            debug_name: "savgol_filter",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_x = x.wire2api();
            let api_window_length = window_length.wire2api();
            let api_poly_order = poly_order.wire2api();
            let api_derivative = derivative.wire2api();
            move |task_callback| {
                savgol_filter(api_x, api_window_length, api_poly_order, api_derivative)
            }
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}
impl Wire2Api<f64> for f64 {
    fn wire2api(self) -> f64 {
        self
    }
}

impl Wire2Api<usize> for usize {
    fn wire2api(self) -> usize {
        self
    }
}
// Section: impl IntoDart

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    use super::*;
    // Section: wire functions

    #[wasm_bindgen]
    pub fn wire_savgol_filter(
        port_: MessagePort,
        x: Box<[f64]>,
        window_length: usize,
        poly_order: usize,
        derivative: usize,
    ) {
        wire_savgol_filter_impl(port_, x, window_length, poly_order, derivative)
    }

    // Section: allocate functions

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<Vec<f64>> for Box<[f64]> {
        fn wire2api(self) -> Vec<f64> {
            self.into_vec()
        }
    }

    // Section: impl Wire2Api for JsValue

    impl Wire2Api<f64> for JsValue {
        fn wire2api(self) -> f64 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<Vec<f64>> for JsValue {
        fn wire2api(self) -> Vec<f64> {
            self.unchecked_into::<js_sys::Float64Array>()
                .to_vec()
                .into()
        }
    }
    impl Wire2Api<usize> for JsValue {
        fn wire2api(self) -> usize {
            self.unchecked_into_f64() as _
        }
    }
}
#[cfg(target_family = "wasm")]
pub use web::*;

#[cfg(not(target_family = "wasm"))]
mod io {
    use super::*;
    // Section: wire functions

    #[no_mangle]
    pub extern "C" fn wire_savgol_filter(
        port_: i64,
        x: *mut wire_float_64_list,
        window_length: usize,
        poly_order: usize,
        derivative: usize,
    ) {
        wire_savgol_filter_impl(port_, x, window_length, poly_order, derivative)
    }

    // Section: allocate functions

    #[no_mangle]
    pub extern "C" fn new_float_64_list_0(len: i32) -> *mut wire_float_64_list {
        let ans = wire_float_64_list {
            ptr: support::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        support::new_leak_box_ptr(ans)
    }

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<Vec<f64>> for *mut wire_float_64_list {
        fn wire2api(self) -> Vec<f64> {
            unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }

    // Section: wire structs

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_float_64_list {
        ptr: *mut f64,
        len: i32,
    }

    // Section: impl NewWithNullPtr

    pub trait NewWithNullPtr {
        fn new_with_null_ptr() -> Self;
    }

    impl<T> NewWithNullPtr for *mut T {
        fn new_with_null_ptr() -> Self {
            std::ptr::null_mut()
        }
    }

    // Section: sync execution mode utility

    #[no_mangle]
    pub extern "C" fn free_WireSyncReturn(ptr: support::WireSyncReturn) {
        unsafe {
            let _ = support::box_from_leak_ptr(ptr);
        };
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;
